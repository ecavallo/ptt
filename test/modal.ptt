--------------------------------------------------------------------------------
-- Modality tests
--------------------------------------------------------------------------------

let par modal_id : Codisc ((A : U<0>) -> A -> A) =
  codisc (fun A a -> a)

let pt modal_id : (A : U<0>) -> A -> A =
  fun A a -> a

let pt _ : (Global U<0>) -> U<0> =
  fun A -> Global (unglob A)

let par _ : (Codisc U<0>) -> U<0> =
  fun A -> Codisc (uncodisc A)

let pt into : (A : U<0>) -> A -> Global (Codisc A) =
  fun A a -> glob (codisc a)

let pt out : (A : U<0>) -> (Global (Codisc A)) -> A =
  fun A p -> uncodisc (unglob p)

let pt into_out : (A : U<0>) (p : Global (Codisc A))
  -> Id (Global (Codisc A)) (into A (out A p)) p
  =
  fun A p -> refl p

let pt out_into : (A : U<0>) (a : A)
  -> Id A (out A (into A a)) a
  =
  fun A a -> refl a

let par into2 : (A : U<0>) -> A -> Codisc (Global A) =
  fun A a -> codisc (glob a)

-- Should not check
-- let par out2 : (A : U<0>) -> (Codisc (Global A)) -> A =
--   fun A a -> unglob (uncodisc a)

--------------------------------------------------------------------------------
-- Polymorphic endofunction
--------------------------------------------------------------------------------

let pt readOff : (Global ((A : U<0>) -> A -> A)) -> (A : U<0>) -> A -> A =
  fun F A a -> uncodisc ((unglob F) (Codisc A) (codisc a))

normalize pt readOff (glob (fun A a -> a)) at (A : U<0>) -> A -> A

let gelproj : (A : U<0>) (P : A -> U<0>) (a : A) -> [x] Gel x {A} (a -> P a) {a} -> P a =
  fun A P a p ->
  ungel x : 1 -> p @ x at _ -> P a with | gel r -> r

let id_param1 : (F : (A : U<0>) -> A -> A) -> (A : U<0>) (a : A) -> Id A (F A a) a =
  fun F A a ->
  let P : A -> U<0> = fun b -> Id A b a in
  gelproj A (fun b -> P b) (F A a) (bri x -> F (Gel x {A} (b -> P b)) (gel x {a} (refl a)))

let pt uncong_codisc : (A : U<0>) (a0 : A) (a1 : A)
  -> (Global (Id (Codisc A) (codisc a0) (codisc a1)))
  -> Id A a0 a1
  =
  fun A a0 a1 g ->
  uncodisc
    (match (unglob g) at b0 b1 _ -> Codisc (Id A (uncodisc b0) (uncodisc b1)) with
     | refl z -> codisc (refl (uncodisc z)))

let pt id_param_global : (F : Global ((A : U<0>) -> A -> A)) (A : U<0>) (a : A)
  -> Id A (readOff F A a) a
  =
  fun F A a ->
  uncong_codisc A (readOff F A a) a (glob (id_param1 (unglob F) (Codisc A) (codisc a)))

--------------------------------------------------------------------------------
-- Polymorphic endofunction on coproduct
--------------------------------------------------------------------------------

let pt Coprod_pt : U<0> -> U<0> -> U<0> =
  fun A B -> (b : bool) * if b at _ -> U<0> with | tt -> A | ff -> B

let pt case_pt : (A : U<0>) (B : U<0>) (P : (Coprod_pt A B) -> U<0>)
  -> ((a : A) -> P <tt,a>)
  -> ((b : B) -> P <ff,b>)
  -> ((c : Coprod_pt A B) -> P c)
  =
  fun A B P f g c ->
  (if fst c at b -> (t : if b at _ -> U<0> with | tt -> A | ff -> B) -> P <b,t> with
    | tt -> fun a -> f a
    | ff -> fun b -> g b)
    (snd c)

let Coprod_par : U<0> -> U<0> -> U<0> =
  fun A B -> (b : bool) * if b at _ -> U<0> with | tt -> A | ff -> B

let case_par : (A : U<0>) (B : U<0>) (P : (Coprod_par A B) -> U<0>)
  -> ((a : A) -> P <tt,a>)
  -> ((b : B) -> P <ff,b>)
  -> ((c : Coprod_par A B) -> P c)
  =
  fun A B P f g c ->
  (if fst c at b -> (t : if b at _ -> U<0> with | tt -> A | ff -> B) -> P <b,t> with
    | tt -> fun a -> f a
    | ff -> fun b -> g b)
    (snd c)

let pt fwd : (A : U<0>) (B : U<0>)
  -> Global ((Coprod_par (Codisc A) (Codisc B)) -> Codisc (Coprod_pt A B))
  =
  fun A B ->
  glob
    (case_par (Codisc A) (Codisc B)
       (fun _ -> Codisc (Coprod_pt A B))
       (fun ca -> codisc <tt, uncodisc ca>)
       (fun cb -> codisc <ff, uncodisc cb>))

let pt bwd : (A : U<0>) (B : U<0>)
  -> (Coprod_pt A B)
  -> Global (Coprod_par (Codisc A) (Codisc B))
  =
  fun A B ->
  case_pt A B
    (fun _ -> Global (Coprod_par (Codisc A) (Codisc B)))
    (fun a -> glob (<tt, codisc a>))
    (fun b -> glob (<ff, codisc b>))

let pt readOff : (Global ((A : U<0>) (B : U<0>) -> (Coprod_par A B) -> Coprod_par A B))
  -> (A : U<0>) (B : U<0>) -> (Coprod_pt A B) -> Coprod_pt A B
  =
  fun F A B c ->
  uncodisc ((unglob (fwd A B)) ((unglob F) (Codisc A) (Codisc B) (unglob (bwd A B c))))

normalize pt readOff (glob (fun A B c -> c)) at (A : U<0>) (B : U<0>) -> (Coprod_pt A B) -> Coprod_pt A B

let pt _ :
  Id ((A : U<0>) (B : U<0>) -> (Coprod_pt A B) -> Coprod_pt A B)
    (readOff (glob (fun A B c -> c)))
    (fun A B c -> uncodisc ((unglob (fwd A B)) (unglob (bwd A B c))))
  =
  refl (readOff (glob (fun A B c -> c)))