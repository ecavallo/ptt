--------------------------------------------------------------------------------
-- Basic tests for (nullary) Gel-types
--------------------------------------------------------------------------------

let gel_test1 : (A : U<0>) -> A -> [x] Gel x A {} =
  fun A a -> bri x -> gel x a

normalize def gel_test1

let gel_test2 : (A : U<0>) -> [x] (Gel x A) -> Gel x A {} =
  fun A -> bri x -> fun p -> p

normalize def gel_test2

let gel_test3 : (A : U<0>) -> [x] Gel x A {} -> [x] Gel x A {} =
  fun A p -> p

normalize def gel_test3

let gel_test4 : (A : U<0>) -> [x] Gel x A {} -> A =
  fun A p -> ungel x : 0 -> p @ x at _ -> A with | gel a -> a

normalize def gel_test4

let gel_test5 : (A : U<0>) -> (a : A) -> Id A (gel_test4 A (bri x -> gel x a)) a =
  fun A a -> refl a

normalize def gel_test5

-- should not check with positive Gel
-- let gel_test6_bad : (A : U<0>) -> (p : [x] Gel x A {})
--   -> Id ([x] Gel x A {}) (bri x -> gel x (gel_test4 A p)) p
--   =
--   fun A p -> refl p

let gel_test6 : (A : U<0>) -> (p : [x] Gel x A {})
  -> Id ([x] Gel x A {}) (bri x -> gel x (gel_test4 A p)) p
  =
  fun A p ->
  ungel x : 0 -> p @ x at q -> Id ([x] Gel x A {}) (bri x -> gel x (gel_test4 A q)) q with
  | gel a -> refl (bri x -> gel x a)

normalize def gel_test6

let gel_test7 : (A : U<0>) -> [x] [y] Gel y (Gel x A) {} {} -> A =
  fun A g -> gel_test4 A (bri x -> (gel_test4 (Gel x A) (g @ x)))

normalize def gel_test7

let gel_test8 : (A : U<0>) (B : U<0>) (f : A -> B) -> [x] Gel x A {} -> B =
  fun A B f p -> ungel x : 0 -> p @ x at _ -> B with | gel a -> f a

normalize def gel_test8

-- test of capture-avoiding substitution in ungel

let gel_test10 : (A : U<0>) (g : [x] [y] Gel y (Gel x A) {} {}) (b : bool)
  -> Id A (gel_test7 A g) (gel_test7 A g)
  =
  fun A g ->
  let t : A = gel_test4 A (bri x -> (gel_test4 (Gel x A) (g @ x)))
  in
  fun _ -> refl t

normalize def gel_test10