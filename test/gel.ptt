let gel_test1 : (A : U<0>) -> A -> [x] Gel x A =
  fun A a -> bri x -> gel x a

let gel_test2 : (A : U<0>) -> [x] ((Gel x A) -> Gel x A) =
  fun A -> bri x -> fun p -> p

let gel_test3 : (A : U<0>) -> ([x] Gel x A) -> ([x] Gel x A) =
  fun A p -> p

let gel_test4 : (A : U<0>) -> ([x] Gel x A) -> A =
  fun A p -> ungel x -> p @ x

let gel_test5 : (A : U<0>) -> (a : A) -> Id A (ungel x -> (gel x a at Gel x A)) a =
  fun A a -> refl a

let gel_test6 : (A : U<0>) -> (p : [x] Gel x A)
  -> Id ([x] Gel x A) (bri x -> gel x (ungel y.-> p @ y)) p
  =
  fun A p -> refl p

let gel_test7 : ([x] nat) -> nat =
  fun p -> ungel x ->
  rec (p @ x) at _ -> Gel x nat with
  | zero -> gel x zero
  | suc _, q ->
    extent x of q in y -> Gel y nat at y _ -> Gel y nat with
    | t y -> gel y (suc (ungel z -> t @ z))

let subst : (A : nat -> U<0>) (n : nat) (m : nat) -> (Id nat n m) -> (A n) -> (A m) =
  fun A n m prf ->
  match prf at x y prf -> (A x) -> (A y) with
  | refl _ -> fun x -> x

let cong_suc : (m : nat) (n : nat) -> (Id nat m n) -> Id nat (suc m) (suc n) =
  fun m n eq ->
  match eq at x y _ -> Id nat (suc x) (suc y) with
  | refl z -> refl (suc z)

let gel_test8 : (n : nat) -> nat =
  fun n -> gel_test7 (bri _ -> n)

-- This has the wrong normal form!!!
let gel_test9 : (n : nat) -> nat =
  fun n -> gel_test7 (bri _ -> suc n)

-- This is broken!!!
-- let gel_test10 : (n : nat) -> Id nat (gel_test7 (bri _ -> n)) n =
--   fun n ->
--   rec n at n -> Id nat (gel_test7 (bri _ -> n)) n with
--   | zero -> refl zero
--   | suc k, q -> cong_suc (gel_test7 (bri _ -> k)) k q

normalize def gel_test1
normalize def gel_test2
normalize def gel_test3
normalize def gel_test4
normalize def gel_test5
normalize def gel_test6
normalize def gel_test7
normalize def gel_test8
normalize def gel_test9
