-- Should not check
-- let diagonal : (A : U<0>) (p : [x y] A) -> ([x] A) =
--   fun A p -> [x. p @ x x]

-- Should not check
-- let diagonal_extent : (A : U<0>) -> [x] (A -> A) =
--   fun A -> [x. fun a -> extent x of a in [_. A] at [_. _ -> A] with | q -> _. q @ x]

let fun_id : (A : U<0>) (B : A -> U<0>) -> ((x : A) -> B x) -> ((x : A) -> B x) =
  fun A B f -> f

let extent_test : (A : U<0>) -> [x] (A -> [y] A) =
  fun A -> [x. fun a -> extent x of a in [_. A] at [_. _ -> [y] A] with | q -> y. q]

let extent_test2 : (A : U<0>) (B : U<0>) -> (([x] A) -> [x] B) -> ([x] A) -> [x] B =
  fun A B f q -> [x. extent x of (q @ x) in [_. A] at [_. _ -> B] with | q -> y. (f q) @ y]
  
let bunext : (A : U<0>) (B : U<0>) -> (([x] A) -> [x] B) -> [x] A -> B =
  fun A B f -> [x. fun a -> extent x of a in [_. A] at [_. _ -> B] with | q -> y. (f q) @ y]

let bunapp : (A : U<0>) (B : U<0>) -> ([x] A -> B) -> ([x] A) -> [x] B =
  fun A B p q -> [x. (p @ x) (q @ x)]

let extent_test3a : (A : U<0>) (B : U<0>) -> (([x] A) -> [x] B) -> (([x] A) -> [x] B) =
  fun A B f q -> [z. ((fun a -> extent z of a in [_. A] at [_. _ -> B] with | q -> y. (f q) @ y at (A -> B))) (q @ z)]

let extent_test3b : (A : U<0>) (B : U<0>) -> (([x] A) -> [x] B) -> (([x] A) -> [x] B) =
  fun A B f q -> [z. (extent z of (q @ z) in [_. A] at [_. _ -> B] with | q -> y. (f q) @ y at B)]

let extent_test3 : (A : U<0>) (B : U<0>) -> (([x] A) -> [x] B) -> (([x] A) -> [x] B) =
  fun A B f q -> [z. ((([x. fun a -> extent x of a in [_. A] at [_. _ -> B] with | q -> y. (f q) @ y] at ([x] A -> B))) @ z) (q @ z)]

let extent_test4 : (A : U<0>) (B : U<0>) -> (([x] A) -> [x] B) -> (([x] A) -> [x] B) =
  fun A B f -> (((fun A B p q -> [x. (p @ x) (q @ x)]) at (A : U<0>) (B : U<0>) -> ([x] A -> B) -> ([x] A) -> [x] B)) A B [x. fun a -> extent x of a in [_. A] at [_. _ -> B] with | q -> y. (f q) @ y]

let extent_test4a : (A : U<0>) (B : U<0>) -> (([x] A) -> [x] B) -> (([x] A) -> [x] B) =
  fun A B f -> (((fun q -> [x. (((fun a -> extent x of a in [_. A] at [_. _ -> B] with | q -> y. (f q) @ y) at A -> B)) (q @ x)]) at ([x] A) -> [x] B))

let extent_test5 : (A : U<0>) (B : U<0>) -> (([x] A) -> [x] B) -> (([x] A) -> [x] B) =
  fun A B f -> bunapp A B (bunext A B f)

let bunext_inv : (A : U<0>) (B : U<0>) (f : ([x] A) -> [x] B) (q : [x] A)
  -> [x] Id B ((bunapp A B (bunext A B f) q) @ x) ((f q) @ x)
  =
  fun A B f q -> [x. refl ((f q) @ x)]

let bunext_inv2 : (A : U<0>) (B : U<0>) (f : ([x] A) -> [x] B)
  -> Id (([x] A) -> [x] B) (bunapp A B (bunext A B f)) f
  =
  fun A B f -> refl f

-- Should not check
-- let bunapp_inv_bad : (A : U<0>) (B : U<0>) (p : [x] A -> B)
--   -> [x] (a : A) -> Id B (((bunext A B (bunapp A B p)) @ x) a) ((p @ x) a)
--   =
--   fun A B p -> [x. fun a -> refl ((p @ x) a)]

let bunapp_inv : (A : U<0>) (B : U<0>) (p : [x] A -> B)
  -> [x] (a : A) -> Id B (((bunext A B (bunapp A B p)) @ x) a) ((p @ x) a)
  =
  fun A B p -> [x. fun a -> extent x of a in [_. A] at [y. c -> Id B (((bunext A B (bunapp A B p)) @ y) c) ((p @ y) c)] with | q -> y. refl ((p @ y) (q @ y))]

let extent_type_test : (A : U<0>)
  -> A -> [x] (extent x of A in [_. U<0>] at [_. _ -> U<0>] with | q -> y. q @ y)
  =
  fun A a -> [x. a]

let extent_type_test2 : (A : U<0>)
  -> [x] (A -> extent x of A in [_. U<0>] at [_. _ -> U<0>] with | q -> y. q @ y)
  =
  fun A -> [x. fun a -> a]

-- Should not check
-- let extent_type_test_bad : 
--   [x] ((A : U<0>) -> A -> extent x of A in [_. U<0>] at [_. _ -> U<0>] with | q -> y. q @ y)
--   =
--   [x. fun A a -> a]

let extent_test6 : (A : U<0>) (B : U<0>) (f : ([x] A) -> [x] B) (q : [x] A)
  -> [x] Id B ((f q) @ x) ((bunapp A B (bunext A B (bunapp A B (bunext A B f))) q) @ x)
  =
  fun A B f q -> [x. refl ((f q) @ x)]

normalize def fun_id
normalize def extent_test
normalize def extent_test2
normalize def bunext
normalize def bunapp
normalize def extent_test3a
normalize def extent_test3b
normalize def extent_test3
normalize def extent_test4a
normalize def extent_test5
normalize def bunext_inv
normalize def bunext_inv2
normalize def bunapp_inv
normalize def extent_type_test
normalize def extent_type_test2
normalize def extent_test6
